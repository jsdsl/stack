{"version":3,"sources":["../ts/stack.ts"],"names":["abstract_list_1","require","iter_over_1","Stack","AbstractList","[object Object]","elements","super","this","internalStack","addAll","element","push","pop","length","includes","index","ArrayIterator","indexOf","splice","exports"],"mappings":"oEAMA,MAAAA,gBAAAC,QAAA,wBACAC,YAAAD,QAAA,aASA,MAAaE,cAAiBH,gBAAAI,aAI7BC,eAAsBC,GAErBC,QAEAC,KAAKC,cAAgB,GACrBD,KAAKE,OAAOJ,GAIND,KAAKM,GAEXH,KAAKC,cAAcG,KAAKD,GAIlBN,MAEN,OAAOG,KAAKC,cAAcI,MAIpBR,OAEN,OAAOG,KAAKC,cAAcD,KAAKC,cAAcK,OAAS,GAIhDT,IAAIM,GAEVH,KAAKI,KAAKD,GAIJN,QAENG,KAAKC,cAAgB,GAIfJ,SAASM,GAEf,OAAOH,KAAKC,cAAcM,SAASJ,GAI7BN,IAAIW,GAEV,OAAOR,KAAKC,cAAcO,GAIpBX,UAEN,OAAsC,IAA9BG,KAAKC,cAAcK,OAIrBT,WAEN,OAAO,IAAIH,YAAAe,cAAiBT,KAAKC,eAI3BJ,OAAOM,GAEb,IAAIK,EAEJ,IAIgB,KAFfA,EAAQR,KAAKC,cAAcS,QAAQP,KAEjBH,KAAKC,cAAcU,OAAOH,EAAO,UAEhC,IAAXA,GAIHX,OAEN,OAAOG,KAAKC,cAAcK,OAIpBT,UAEN,OAAOG,KAAKC,eAzFdW,QAAAjB,MAAAA","file":"stack.js","sourcesContent":["/*\n *\tCreated by Trevor Sears <trevorsears.main@gmail.com>.\n *\t9:12 PM -- July 29th, 2019.\n *\tProject: @jsdsl/stack\n */\n\nimport { AbstractList } from \"@jsdsl/abstract-list\";\nimport { IIterator, ArrayIterator } from \"iter-over\";\n\n/**\n * A stack (LIFO) implementation written in JavaScript/TypeScript.\n *\n * @author Trevor Sears <trevorsears.main@gmail.com>\n * @version v0.1.0\n * @since v0.1.0\n */\nexport class Stack<E> extends AbstractList<E> {\n\t\n\tprivate internalStack: E[];\n\t\n\tpublic constructor(...elements: E[]) {\n\t\t\n\t\tsuper();\n\t\t\n\t\tthis.internalStack = [];\n\t\tthis.addAll(elements);\n\t\t\n\t}\n\t\n\tpublic push(element: E): void {\n\t\t\n\t\tthis.internalStack.push(element);\n\t\t\n\t}\n\t\n\tpublic pop(): E | undefined {\n\t\t\n\t\treturn this.internalStack.pop();\n\t\t\n\t}\n\t\n\tpublic peek(): E {\n\t\t\n\t\treturn this.internalStack[this.internalStack.length - 1];\n\t\t\n\t}\n\t\n\tpublic add(element: E): void {\n\t\n\t\tthis.push(element);\n\t\n\t}\n\t\n\tpublic clear(): void {\n\t\t\n\t\tthis.internalStack = [];\n\t\t\n\t}\n\t\n\tpublic contains(element: E): boolean {\n\t\t\n\t\treturn this.internalStack.includes(element);\n\t\t\n\t}\n\t\n\tpublic get(index: number): E {\n\t\t\n\t\treturn this.internalStack[index];\n\t\t\n\t}\n\t\n\tpublic isEmpty(): boolean {\n\t\t\n\t\treturn (this.internalStack.length === 0);\n\t\t\n\t}\n\t\n\tpublic iterator(): IIterator<E> {\n\t\t\n\t\treturn new ArrayIterator<E>(this.internalStack);\n\t\t\n\t}\n\t\n\tpublic remove(element: E): void {\n\t\t\n\t\tlet index: number;\n\t\t\n\t\tdo {\n\t\t\t\n\t\t\tindex = this.internalStack.indexOf(element);\n\t\t\t\n\t\t\tif (index !== -1) this.internalStack.splice(index, 1);\n\t\t\t\n\t\t} while (index !== -1)\n\t\t\n\t}\n\t\n\tpublic size(): number {\n\t\t\n\t\treturn this.internalStack.length;\n\t\t\n\t}\n\t\n\tpublic toArray(): E[] {\n\t\t\n\t\treturn this.internalStack;\n\t\t\n\t}\n\t\n}"]}